{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":47,"index":47}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./Crypto.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":48},"end":{"line":2,"column":48,"index":96}}],"key":"t4jPthUJCVssyew/Bvzn4bGBsgM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _Crypto = require(_dependencyMap[1], \"./Crypto.types\");\n  const getCrypto = () => window.crypto ?? window.msCrypto;\n  var _default = exports.default = {\n    async digestStringAsync(algorithm, data, options) {\n      if (!crypto.subtle) {\n        throw new _expoModulesCore.CodedError('ERR_CRYPTO_UNAVAILABLE', 'Access to the WebCrypto API is restricted to secure origins (localhost/https).');\n      }\n      const encoder = new TextEncoder();\n      const buffer = encoder.encode(data);\n      const hashedData = await crypto.subtle.digest(algorithm, buffer);\n      if (options.encoding === _Crypto.CryptoEncoding.HEX) {\n        return hexString(hashedData);\n      } else if (options.encoding === _Crypto.CryptoEncoding.BASE64) {\n        return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n      }\n      throw new _expoModulesCore.CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n    },\n    getRandomBytes(length) {\n      const array = new Uint8Array(length);\n      return getCrypto().getRandomValues(array);\n    },\n    async getRandomBytesAsync(length) {\n      const array = new Uint8Array(length);\n      return getCrypto().getRandomValues(array);\n    },\n    getRandomValues(typedArray) {\n      return getCrypto().getRandomValues(typedArray);\n    },\n    randomUUID() {\n      return getCrypto().randomUUID();\n    },\n    digestAsync(algorithm, data) {\n      return getCrypto().subtle.digest(algorithm, data);\n    }\n  };\n  function hexString(buffer) {\n    const byteArray = new Uint8Array(buffer);\n    const hexCodes = [...byteArray].map(value => {\n      const hexCode = value.toString(16);\n      const paddedHexCode = hexCode.padStart(2, '0');\n      return paddedHexCode;\n    });\n    return hexCodes.join('');\n  }\n});","lineCount":51,"map":[[6,2,1,0],[6,6,1,0,"_expoModulesCore"],[6,22,1,0],[6,25,1,0,"require"],[6,32,1,0],[6,33,1,0,"_dependencyMap"],[6,47,1,0],[7,2,2,0],[7,6,2,0,"_Crypto"],[7,13,2,0],[7,16,2,0,"require"],[7,23,2,0],[7,24,2,0,"_dependencyMap"],[7,38,2,0],[8,2,3,0],[8,8,3,6,"getCrypto"],[8,17,3,15],[8,20,3,18,"getCrypto"],[8,21,3,18],[8,26,3,24,"window"],[8,32,3,30],[8,33,3,31,"crypto"],[8,39,3,37],[8,43,3,41,"window"],[8,49,3,47],[8,50,3,48,"msCrypto"],[8,58,3,56],[9,2,3,57],[9,6,3,57,"_default"],[9,14,3,57],[9,17,3,57,"exports"],[9,24,3,57],[9,25,3,57,"default"],[9,32,3,57],[9,35,4,15],[10,4,5,4],[10,10,5,10,"digestStringAsync"],[10,27,5,27,"digestStringAsync"],[10,28,5,28,"algorithm"],[10,37,5,37],[10,39,5,39,"data"],[10,43,5,43],[10,45,5,45,"options"],[10,52,5,52],[10,54,5,54],[11,6,6,8],[11,10,6,12],[11,11,6,13,"crypto"],[11,17,6,19],[11,18,6,20,"subtle"],[11,24,6,26],[11,26,6,28],[12,8,7,12],[12,14,7,18],[12,18,7,22,"CodedError"],[12,45,7,32],[12,46,7,33],[12,70,7,57],[12,72,7,59],[12,152,7,139],[12,153,7,140],[13,6,8,8],[14,6,9,8],[14,12,9,14,"encoder"],[14,19,9,21],[14,22,9,24],[14,26,9,28,"TextEncoder"],[14,37,9,39],[14,38,9,40],[14,39,9,41],[15,6,10,8],[15,12,10,14,"buffer"],[15,18,10,20],[15,21,10,23,"encoder"],[15,28,10,30],[15,29,10,31,"encode"],[15,35,10,37],[15,36,10,38,"data"],[15,40,10,42],[15,41,10,43],[16,6,11,8],[16,12,11,14,"hashedData"],[16,22,11,24],[16,25,11,27],[16,31,11,33,"crypto"],[16,37,11,39],[16,38,11,40,"subtle"],[16,44,11,46],[16,45,11,47,"digest"],[16,51,11,53],[16,52,11,54,"algorithm"],[16,61,11,63],[16,63,11,65,"buffer"],[16,69,11,71],[16,70,11,72],[17,6,12,8],[17,10,12,12,"options"],[17,17,12,19],[17,18,12,20,"encoding"],[17,26,12,28],[17,31,12,33,"CryptoEncoding"],[17,53,12,47],[17,54,12,48,"HEX"],[17,57,12,51],[17,59,12,53],[18,8,13,12],[18,15,13,19,"hexString"],[18,24,13,28],[18,25,13,29,"hashedData"],[18,35,13,39],[18,36,13,40],[19,6,14,8],[19,7,14,9],[19,13,15,13],[19,17,15,17,"options"],[19,24,15,24],[19,25,15,25,"encoding"],[19,33,15,33],[19,38,15,38,"CryptoEncoding"],[19,60,15,52],[19,61,15,53,"BASE64"],[19,67,15,59],[19,69,15,61],[20,8,16,12],[20,15,16,19,"btoa"],[20,19,16,23],[20,20,16,24,"String"],[20,26,16,30],[20,27,16,31,"fromCharCode"],[20,39,16,43],[20,40,16,44],[20,43,16,47],[20,47,16,51,"Uint8Array"],[20,57,16,61],[20,58,16,62,"hashedData"],[20,68,16,72],[20,69,16,73],[20,70,16,74],[20,71,16,75],[21,6,17,8],[22,6,18,8],[22,12,18,14],[22,16,18,18,"CodedError"],[22,43,18,28],[22,44,18,29],[22,63,18,48],[22,65,18,50],[22,98,18,83],[22,99,18,84],[23,4,19,4],[23,5,19,5],[24,4,20,4,"getRandomBytes"],[24,18,20,18,"getRandomBytes"],[24,19,20,19,"length"],[24,25,20,25],[24,27,20,27],[25,6,21,8],[25,12,21,14,"array"],[25,17,21,19],[25,20,21,22],[25,24,21,26,"Uint8Array"],[25,34,21,36],[25,35,21,37,"length"],[25,41,21,43],[25,42,21,44],[26,6,22,8],[26,13,22,15,"getCrypto"],[26,22,22,24],[26,23,22,25],[26,24,22,26],[26,25,22,27,"getRandomValues"],[26,40,22,42],[26,41,22,43,"array"],[26,46,22,48],[26,47,22,49],[27,4,23,4],[27,5,23,5],[28,4,24,4],[28,10,24,10,"getRandomBytesAsync"],[28,29,24,29,"getRandomBytesAsync"],[28,30,24,30,"length"],[28,36,24,36],[28,38,24,38],[29,6,25,8],[29,12,25,14,"array"],[29,17,25,19],[29,20,25,22],[29,24,25,26,"Uint8Array"],[29,34,25,36],[29,35,25,37,"length"],[29,41,25,43],[29,42,25,44],[30,6,26,8],[30,13,26,15,"getCrypto"],[30,22,26,24],[30,23,26,25],[30,24,26,26],[30,25,26,27,"getRandomValues"],[30,40,26,42],[30,41,26,43,"array"],[30,46,26,48],[30,47,26,49],[31,4,27,4],[31,5,27,5],[32,4,28,4,"getRandomValues"],[32,19,28,19,"getRandomValues"],[32,20,28,20,"typedArray"],[32,30,28,30],[32,32,28,32],[33,6,29,8],[33,13,29,15,"getCrypto"],[33,22,29,24],[33,23,29,25],[33,24,29,26],[33,25,29,27,"getRandomValues"],[33,40,29,42],[33,41,29,43,"typedArray"],[33,51,29,53],[33,52,29,54],[34,4,30,4],[34,5,30,5],[35,4,31,4,"randomUUID"],[35,14,31,14,"randomUUID"],[35,15,31,14],[35,17,31,17],[36,6,32,8],[36,13,32,15,"getCrypto"],[36,22,32,24],[36,23,32,25],[36,24,32,26],[36,25,32,27,"randomUUID"],[36,35,32,37],[36,36,32,38],[36,37,32,39],[37,4,33,4],[37,5,33,5],[38,4,34,4,"digestAsync"],[38,15,34,15,"digestAsync"],[38,16,34,16,"algorithm"],[38,25,34,25],[38,27,34,27,"data"],[38,31,34,31],[38,33,34,33],[39,6,35,8],[39,13,35,15,"getCrypto"],[39,22,35,24],[39,23,35,25],[39,24,35,26],[39,25,35,27,"subtle"],[39,31,35,33],[39,32,35,34,"digest"],[39,38,35,40],[39,39,35,41,"algorithm"],[39,48,35,50],[39,50,35,52,"data"],[39,54,35,56],[39,55,35,57],[40,4,36,4],[41,2,37,0],[41,3,37,1],[42,2,38,0],[42,11,38,9,"hexString"],[42,20,38,18,"hexString"],[42,21,38,19,"buffer"],[42,27,38,25],[42,29,38,27],[43,4,39,4],[43,10,39,10,"byteArray"],[43,19,39,19],[43,22,39,22],[43,26,39,26,"Uint8Array"],[43,36,39,36],[43,37,39,37,"buffer"],[43,43,39,43],[43,44,39,44],[44,4,40,4],[44,10,40,10,"hexCodes"],[44,18,40,18],[44,21,40,21],[44,22,40,22],[44,25,40,25,"byteArray"],[44,34,40,34],[44,35,40,35],[44,36,40,36,"map"],[44,39,40,39],[44,40,40,41,"value"],[44,45,40,46],[44,49,40,51],[45,6,41,8],[45,12,41,14,"hexCode"],[45,19,41,21],[45,22,41,24,"value"],[45,27,41,29],[45,28,41,30,"toString"],[45,36,41,38],[45,37,41,39],[45,39,41,41],[45,40,41,42],[46,6,42,8],[46,12,42,14,"paddedHexCode"],[46,25,42,27],[46,28,42,30,"hexCode"],[46,35,42,37],[46,36,42,38,"padStart"],[46,44,42,46],[46,45,42,47],[46,46,42,48],[46,48,42,50],[46,51,42,53],[46,52,42,54],[47,6,43,8],[47,13,43,15,"paddedHexCode"],[47,26,43,28],[48,4,44,4],[48,5,44,5],[48,6,44,6],[49,4,45,4],[49,11,45,11,"hexCodes"],[49,19,45,19],[49,20,45,20,"join"],[49,24,45,24],[49,25,45,25],[49,27,45,27],[49,28,45,28],[50,2,46,0],[51,0,46,1],[51,3]],"functionMap":{"names":["<global>","getCrypto","default.digestStringAsync","default.getRandomBytes","default.getRandomBytesAsync","default.getRandomValues","default.randomUUID","default.digestAsync","hexString","map$argument_0"],"mappings":"AAA;kBCE,sCD;IEE;KFc;IGC;KHG;IIC;KJG;IKC;KLE;IMC;KNE;IOC;KPE;AQE;wCCE;KDI;CRE"}},"type":"js/module"}]}