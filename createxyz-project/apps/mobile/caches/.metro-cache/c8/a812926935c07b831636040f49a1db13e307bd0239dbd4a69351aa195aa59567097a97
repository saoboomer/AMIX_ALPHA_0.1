{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ClipboardPasteButton","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":67},"end":{"line":2,"column":62,"index":129}}],"key":"LUcIX+CIhB4XU+2a8Ub9n3L2I8w=","exportNames":["*"]}},{"name":"./ExpoClipboard","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":130},"end":{"line":3,"column":44,"index":174}}],"key":"64y7yRjbBRJxCbEo7THAGLu8m4I=","exportNames":["*"]}},{"name":"./Clipboard.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":215,"column":0,"index":7930},"end":{"line":215,"column":34,"index":7964}}],"key":"meqRnb9IzYBTuycFxx1YZMmO78c=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _exportNames = {\n    getStringAsync: true,\n    setStringAsync: true,\n    setString: true,\n    hasStringAsync: true,\n    getUrlAsync: true,\n    setUrlAsync: true,\n    hasUrlAsync: true,\n    getImageAsync: true,\n    setImageAsync: true,\n    hasImageAsync: true,\n    addClipboardListener: true,\n    removeClipboardListener: true,\n    isPasteButtonAvailable: true,\n    ClipboardPasteButton: true\n  };\n  Object.defineProperty(exports, \"ClipboardPasteButton\", {\n    enumerable: true,\n    get: function () {\n      return _ClipboardPasteButton.ClipboardPasteButton;\n    }\n  });\n  exports.addClipboardListener = addClipboardListener;\n  exports.getImageAsync = getImageAsync;\n  exports.getStringAsync = getStringAsync;\n  exports.getUrlAsync = getUrlAsync;\n  exports.hasImageAsync = hasImageAsync;\n  exports.hasStringAsync = hasStringAsync;\n  exports.hasUrlAsync = hasUrlAsync;\n  exports.isPasteButtonAvailable = void 0;\n  exports.removeClipboardListener = removeClipboardListener;\n  exports.setImageAsync = setImageAsync;\n  exports.setString = setString;\n  exports.setStringAsync = setStringAsync;\n  exports.setUrlAsync = setUrlAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ClipboardPasteButton = require(_dependencyMap[2], \"./ClipboardPasteButton\");\n  var _ExpoClipboard = _interopRequireDefault(require(_dependencyMap[3], \"./ExpoClipboard\"));\n  var _Clipboard = require(_dependencyMap[4], \"./Clipboard.types\");\n  Object.keys(_Clipboard).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _Clipboard[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function () {\n        return _Clipboard[key];\n      }\n    });\n  });\n  const onClipboardEventName = 'onClipboardChanged';\n  /**\n   * Gets the content of the user's clipboard. Please note that calling this method on web will prompt\n   * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options Options for the clipboard content to be retrieved.\n   * @returns A promise that resolves to the content of the clipboard.\n   */\n  async function getStringAsync(options = {}) {\n    if (!_ExpoClipboard.default.getStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getStringAsync');\n    }\n    return await _ExpoClipboard.default.getStringAsync(options);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   *\n   * @param text The string to save to the clipboard.\n   * @param options Options for the clipboard content to be set.\n   * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n   * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n   */\n  async function setStringAsync(text, options = {}) {\n    if (!_ExpoClipboard.default.setStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setStringAsync');\n    }\n    return _ExpoClipboard.default.setStringAsync(text, options);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n   *\n   * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n   * the user's clipboard. On iOS and Android, nothing is returned.\n   */\n  function setString(text) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      // on web, we need to return legacy method,\n      // because of different return type\n      return _ExpoClipboard.default.setString(text);\n    } else {\n      setStringAsync(text);\n    }\n  }\n  /**\n   * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n   */\n  function hasStringAsync() {\n    if (!_ExpoClipboard.default.hasStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasStringAsync');\n    }\n    return _ExpoClipboard.default.hasStringAsync();\n  }\n  /**\n   * Gets the URL from the user's clipboard.\n   *\n   * @returns A promise that fulfills to the URL in the clipboard.\n   * @platform ios\n   */\n  async function getUrlAsync() {\n    if (!_ExpoClipboard.default.getUrlAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getUrlAsync');\n    }\n    return await _ExpoClipboard.default.getUrlAsync();\n  }\n  /**\n   * Sets a URL in the user's clipboard.\n   *\n   * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n   * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n   * clipboard contains a URL and behave accordingly.\n   *\n   * @param url The URL to save to the clipboard.\n   * @platform ios\n   */\n  async function setUrlAsync(url) {\n    if (!_ExpoClipboard.default.setUrlAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setUrlAsync');\n    }\n    return _ExpoClipboard.default.setUrlAsync(url);\n  }\n  /**\n   * Returns whether the clipboard has a URL content.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n   * @platform ios\n   */\n  async function hasUrlAsync() {\n    if (!_ExpoClipboard.default.hasUrlAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasUrlAsync');\n    }\n    return await _ExpoClipboard.default.hasUrlAsync();\n  }\n  /**\n   * Gets the image from the user's clipboard and returns it in the specified format. Please note that calling\n   * this method on web will prompt the user to grant your app permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options A `GetImageOptions` object to specify the desired format of the image.\n   * @returns If there was an image in the clipboard, the promise resolves to\n   * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n   * Otherwise, it resolves to `null`.\n   *\n   * @example\n   * ```tsx\n   * const img = await Clipboard.getImageAsync({ format: 'png' });\n   * // ...\n   * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n   * ```\n   */\n  async function getImageAsync(options) {\n    if (!_ExpoClipboard.default.getImageAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getImageAsync');\n    }\n    return await _ExpoClipboard.default.getImageAsync(options);\n  }\n  /**\n   * Sets an image in the user's clipboard.\n   *\n   * @param base64Image Image encoded as a base64 string, without MIME type.\n   *\n   * @example\n   * ```tsx\n   * const result = await ImagePicker.launchImageLibraryAsync({\n   *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n   *   base64: true,\n   * });\n   * await Clipboard.setImageAsync(result.base64);\n   * ```\n   */\n  async function setImageAsync(base64Image) {\n    if (!_ExpoClipboard.default.setImageAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setImageAsync');\n    }\n    return _ExpoClipboard.default.setImageAsync(base64Image);\n  }\n  /**\n   * Returns whether the clipboard has an image content.\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n   */\n  async function hasImageAsync() {\n    if (!_ExpoClipboard.default.hasImageAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasImageAsync');\n    }\n    return _ExpoClipboard.default.hasImageAsync();\n  }\n  /**\n   * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n   * is a no-op on Web.\n   *\n   * @param listener Callback to execute when listener is triggered. The callback is provided a\n   * single argument that is an object containing information about clipboard contents.\n   *\n   * @example\n   * ```typescript\n   * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n   *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n   *     Clipboard.getStringAsync().then(content => {\n   *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n   *     });\n   *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n   *     alert('Yay! Clipboard contains an image');\n   *   }\n   * });\n   * ```\n   */\n  function addClipboardListener(listener) {\n    // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n    const listenerWrapper = event => {\n      const wrappedEvent = {\n        ...event,\n        get content() {\n          console.warn(\"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\");\n          return '';\n        }\n      };\n      listener(wrappedEvent);\n    };\n    return _ExpoClipboard.default.addListener(onClipboardEventName, listenerWrapper);\n  }\n  /**\n   * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n   *\n   * @param subscription The subscription to remove (created by addClipboardListener).\n   *\n   * @example\n   * ```typescript\n   * const subscription = addClipboardListener(() => {\n   *   alert('Copy pasta!');\n   * });\n   * removeClipboardListener(subscription);\n   * ```\n   */\n  function removeClipboardListener(subscription) {\n    subscription.remove();\n  }\n  /**\n   * Property that determines if the `ClipboardPasteButton` is available.\n   *\n   * This requires the users device to be using at least iOS 16.\n   *\n   * `true` if the component is available, and `false` otherwise.\n   */\n  const isPasteButtonAvailable = exports.isPasteButtonAvailable = _expoModulesCore.Platform.OS === 'ios' ? _ExpoClipboard.default.isPasteButtonAvailable : false;\n});","lineCount":266,"map":[[41,2,1,0],[41,6,1,0,"_expoModulesCore"],[41,22,1,0],[41,25,1,0,"require"],[41,32,1,0],[41,33,1,0,"_dependencyMap"],[41,47,1,0],[42,2,2,0],[42,6,2,0,"_ClipboardPasteButton"],[42,27,2,0],[42,30,2,0,"require"],[42,37,2,0],[42,38,2,0,"_dependencyMap"],[42,52,2,0],[43,2,3,0],[43,6,3,0,"_ExpoClipboard"],[43,20,3,0],[43,23,3,0,"_interopRequireDefault"],[43,45,3,0],[43,46,3,0,"require"],[43,53,3,0],[43,54,3,0,"_dependencyMap"],[43,68,3,0],[44,2,215,0],[44,6,215,0,"_Clipboard"],[44,16,215,0],[44,19,215,0,"require"],[44,26,215,0],[44,27,215,0,"_dependencyMap"],[44,41,215,0],[45,2,215,0,"Object"],[45,8,215,0],[45,9,215,0,"keys"],[45,13,215,0],[45,14,215,0,"_Clipboard"],[45,24,215,0],[45,26,215,0,"forEach"],[45,33,215,0],[45,44,215,0,"key"],[45,47,215,0],[46,4,215,0],[46,8,215,0,"key"],[46,11,215,0],[46,29,215,0,"key"],[46,32,215,0],[47,4,215,0],[47,8,215,0,"Object"],[47,14,215,0],[47,15,215,0,"prototype"],[47,24,215,0],[47,25,215,0,"hasOwnProperty"],[47,39,215,0],[47,40,215,0,"call"],[47,44,215,0],[47,45,215,0,"_exportNames"],[47,57,215,0],[47,59,215,0,"key"],[47,62,215,0],[48,4,215,0],[48,8,215,0,"key"],[48,11,215,0],[48,15,215,0,"exports"],[48,22,215,0],[48,26,215,0,"exports"],[48,33,215,0],[48,34,215,0,"key"],[48,37,215,0],[48,43,215,0,"_Clipboard"],[48,53,215,0],[48,54,215,0,"key"],[48,57,215,0],[49,4,215,0,"Object"],[49,10,215,0],[49,11,215,0,"defineProperty"],[49,25,215,0],[49,26,215,0,"exports"],[49,33,215,0],[49,35,215,0,"key"],[49,38,215,0],[50,6,215,0,"enumerable"],[50,16,215,0],[51,6,215,0,"get"],[51,9,215,0],[51,20,215,0,"get"],[51,21,215,0],[52,8,215,0],[52,15,215,0,"_Clipboard"],[52,25,215,0],[52,26,215,0,"key"],[52,29,215,0],[53,6,215,0],[54,4,215,0],[55,2,215,0],[56,2,4,0],[56,8,4,6,"onClipboardEventName"],[56,28,4,26],[56,31,4,29],[56,51,4,49],[57,2,5,0],[58,0,6,0],[59,0,7,0],[60,0,8,0],[61,0,9,0],[62,0,10,0],[63,0,11,0],[64,2,12,7],[64,17,12,22,"getStringAsync"],[64,31,12,36,"getStringAsync"],[64,32,12,37,"options"],[64,39,12,44],[64,42,12,47],[64,43,12,48],[64,44,12,49],[64,46,12,51],[65,4,13,4],[65,8,13,8],[65,9,13,9,"ExpoClipboard"],[65,31,13,22],[65,32,13,23,"getStringAsync"],[65,46,13,37],[65,48,13,39],[66,6,14,8],[66,12,14,14],[66,16,14,18,"UnavailabilityError"],[66,52,14,37],[66,53,14,38],[66,64,14,49],[66,66,14,51],[66,82,14,67],[66,83,14,68],[67,4,15,4],[68,4,16,4],[68,11,16,11],[68,17,16,17,"ExpoClipboard"],[68,39,16,30],[68,40,16,31,"getStringAsync"],[68,54,16,45],[68,55,16,46,"options"],[68,62,16,53],[68,63,16,54],[69,2,17,0],[70,2,18,0],[71,0,19,0],[72,0,20,0],[73,0,21,0],[74,0,22,0],[75,0,23,0],[76,0,24,0],[77,0,25,0],[78,2,26,7],[78,17,26,22,"setStringAsync"],[78,31,26,36,"setStringAsync"],[78,32,26,37,"text"],[78,36,26,41],[78,38,26,43,"options"],[78,45,26,50],[78,48,26,53],[78,49,26,54],[78,50,26,55],[78,52,26,57],[79,4,27,4],[79,8,27,8],[79,9,27,9,"ExpoClipboard"],[79,31,27,22],[79,32,27,23,"setStringAsync"],[79,46,27,37],[79,48,27,39],[80,6,28,8],[80,12,28,14],[80,16,28,18,"UnavailabilityError"],[80,52,28,37],[80,53,28,38],[80,64,28,49],[80,66,28,51],[80,82,28,67],[80,83,28,68],[81,4,29,4],[82,4,30,4],[82,11,30,11,"ExpoClipboard"],[82,33,30,24],[82,34,30,25,"setStringAsync"],[82,48,30,39],[82,49,30,40,"text"],[82,53,30,44],[82,55,30,46,"options"],[82,62,30,53],[82,63,30,54],[83,2,31,0],[84,2,32,0],[85,0,33,0],[86,0,34,0],[87,0,35,0],[88,0,36,0],[89,0,37,0],[90,0,38,0],[91,2,39,7],[91,11,39,16,"setString"],[91,20,39,25,"setString"],[91,21,39,26,"text"],[91,25,39,30],[91,27,39,32],[92,4,40,4],[92,8,40,8,"Platform"],[92,33,40,16],[92,34,40,17,"OS"],[92,36,40,19],[92,41,40,24],[92,46,40,29],[92,48,40,31],[93,6,41,8],[94,6,42,8],[95,6,43,8],[95,13,43,15,"ExpoClipboard"],[95,35,43,28],[95,36,43,29,"setString"],[95,45,43,38],[95,46,43,39,"text"],[95,50,43,43],[95,51,43,44],[96,4,44,4],[96,5,44,5],[96,11,45,9],[97,6,46,8,"setStringAsync"],[97,20,46,22],[97,21,46,23,"text"],[97,25,46,27],[97,26,46,28],[98,4,47,4],[99,2,48,0],[100,2,49,0],[101,0,50,0],[102,0,51,0],[103,0,52,0],[104,0,53,0],[105,0,54,0],[106,0,55,0],[107,2,56,7],[107,11,56,16,"hasStringAsync"],[107,25,56,30,"hasStringAsync"],[107,26,56,30],[107,28,56,33],[108,4,57,4],[108,8,57,8],[108,9,57,9,"ExpoClipboard"],[108,31,57,22],[108,32,57,23,"hasStringAsync"],[108,46,57,37],[108,48,57,39],[109,6,58,8],[109,12,58,14],[109,16,58,18,"UnavailabilityError"],[109,52,58,37],[109,53,58,38],[109,64,58,49],[109,66,58,51],[109,82,58,67],[109,83,58,68],[110,4,59,4],[111,4,60,4],[111,11,60,11,"ExpoClipboard"],[111,33,60,24],[111,34,60,25,"hasStringAsync"],[111,48,60,39],[111,49,60,40],[111,50,60,41],[112,2,61,0],[113,2,62,0],[114,0,63,0],[115,0,64,0],[116,0,65,0],[117,0,66,0],[118,0,67,0],[119,2,68,7],[119,17,68,22,"getUrlAsync"],[119,28,68,33,"getUrlAsync"],[119,29,68,33],[119,31,68,36],[120,4,69,4],[120,8,69,8],[120,9,69,9,"ExpoClipboard"],[120,31,69,22],[120,32,69,23,"getUrlAsync"],[120,43,69,34],[120,45,69,36],[121,6,70,8],[121,12,70,14],[121,16,70,18,"UnavailabilityError"],[121,52,70,37],[121,53,70,38],[121,64,70,49],[121,66,70,51],[121,79,70,64],[121,80,70,65],[122,4,71,4],[123,4,72,4],[123,11,72,11],[123,17,72,17,"ExpoClipboard"],[123,39,72,30],[123,40,72,31,"getUrlAsync"],[123,51,72,42],[123,52,72,43],[123,53,72,44],[124,2,73,0],[125,2,74,0],[126,0,75,0],[127,0,76,0],[128,0,77,0],[129,0,78,0],[130,0,79,0],[131,0,80,0],[132,0,81,0],[133,0,82,0],[134,0,83,0],[135,2,84,7],[135,17,84,22,"setUrlAsync"],[135,28,84,33,"setUrlAsync"],[135,29,84,34,"url"],[135,32,84,37],[135,34,84,39],[136,4,85,4],[136,8,85,8],[136,9,85,9,"ExpoClipboard"],[136,31,85,22],[136,32,85,23,"setUrlAsync"],[136,43,85,34],[136,45,85,36],[137,6,86,8],[137,12,86,14],[137,16,86,18,"UnavailabilityError"],[137,52,86,37],[137,53,86,38],[137,64,86,49],[137,66,86,51],[137,79,86,64],[137,80,86,65],[138,4,87,4],[139,4,88,4],[139,11,88,11,"ExpoClipboard"],[139,33,88,24],[139,34,88,25,"setUrlAsync"],[139,45,88,36],[139,46,88,37,"url"],[139,49,88,40],[139,50,88,41],[140,2,89,0],[141,2,90,0],[142,0,91,0],[143,0,92,0],[144,0,93,0],[145,0,94,0],[146,0,95,0],[147,2,96,7],[147,17,96,22,"hasUrlAsync"],[147,28,96,33,"hasUrlAsync"],[147,29,96,33],[147,31,96,36],[148,4,97,4],[148,8,97,8],[148,9,97,9,"ExpoClipboard"],[148,31,97,22],[148,32,97,23,"hasUrlAsync"],[148,43,97,34],[148,45,97,36],[149,6,98,8],[149,12,98,14],[149,16,98,18,"UnavailabilityError"],[149,52,98,37],[149,53,98,38],[149,64,98,49],[149,66,98,51],[149,79,98,64],[149,80,98,65],[150,4,99,4],[151,4,100,4],[151,11,100,11],[151,17,100,17,"ExpoClipboard"],[151,39,100,30],[151,40,100,31,"hasUrlAsync"],[151,51,100,42],[151,52,100,43],[151,53,100,44],[152,2,101,0],[153,2,102,0],[154,0,103,0],[155,0,104,0],[156,0,105,0],[157,0,106,0],[158,0,107,0],[159,0,108,0],[160,0,109,0],[161,0,110,0],[162,0,111,0],[163,0,112,0],[164,0,113,0],[165,0,114,0],[166,0,115,0],[167,0,116,0],[168,0,117,0],[169,2,118,7],[169,17,118,22,"getImageAsync"],[169,30,118,35,"getImageAsync"],[169,31,118,36,"options"],[169,38,118,43],[169,40,118,45],[170,4,119,4],[170,8,119,8],[170,9,119,9,"ExpoClipboard"],[170,31,119,22],[170,32,119,23,"getImageAsync"],[170,45,119,36],[170,47,119,38],[171,6,120,8],[171,12,120,14],[171,16,120,18,"UnavailabilityError"],[171,52,120,37],[171,53,120,38],[171,64,120,49],[171,66,120,51],[171,81,120,66],[171,82,120,67],[172,4,121,4],[173,4,122,4],[173,11,122,11],[173,17,122,17,"ExpoClipboard"],[173,39,122,30],[173,40,122,31,"getImageAsync"],[173,53,122,44],[173,54,122,45,"options"],[173,61,122,52],[173,62,122,53],[174,2,123,0],[175,2,124,0],[176,0,125,0],[177,0,126,0],[178,0,127,0],[179,0,128,0],[180,0,129,0],[181,0,130,0],[182,0,131,0],[183,0,132,0],[184,0,133,0],[185,0,134,0],[186,0,135,0],[187,0,136,0],[188,0,137,0],[189,2,138,7],[189,17,138,22,"setImageAsync"],[189,30,138,35,"setImageAsync"],[189,31,138,36,"base64Image"],[189,42,138,47],[189,44,138,49],[190,4,139,4],[190,8,139,8],[190,9,139,9,"ExpoClipboard"],[190,31,139,22],[190,32,139,23,"setImageAsync"],[190,45,139,36],[190,47,139,38],[191,6,140,8],[191,12,140,14],[191,16,140,18,"UnavailabilityError"],[191,52,140,37],[191,53,140,38],[191,64,140,49],[191,66,140,51],[191,81,140,66],[191,82,140,67],[192,4,141,4],[193,4,142,4],[193,11,142,11,"ExpoClipboard"],[193,33,142,24],[193,34,142,25,"setImageAsync"],[193,47,142,38],[193,48,142,39,"base64Image"],[193,59,142,50],[193,60,142,51],[194,2,143,0],[195,2,144,0],[196,0,145,0],[197,0,146,0],[198,0,147,0],[199,0,148,0],[200,0,149,0],[201,0,150,0],[202,2,151,7],[202,17,151,22,"hasImageAsync"],[202,30,151,35,"hasImageAsync"],[202,31,151,35],[202,33,151,38],[203,4,152,4],[203,8,152,8],[203,9,152,9,"ExpoClipboard"],[203,31,152,22],[203,32,152,23,"hasImageAsync"],[203,45,152,36],[203,47,152,38],[204,6,153,8],[204,12,153,14],[204,16,153,18,"UnavailabilityError"],[204,52,153,37],[204,53,153,38],[204,64,153,49],[204,66,153,51],[204,81,153,66],[204,82,153,67],[205,4,154,4],[206,4,155,4],[206,11,155,11,"ExpoClipboard"],[206,33,155,24],[206,34,155,25,"hasImageAsync"],[206,47,155,38],[206,48,155,39],[206,49,155,40],[207,2,156,0],[208,2,157,0],[209,0,158,0],[210,0,159,0],[211,0,160,0],[212,0,161,0],[213,0,162,0],[214,0,163,0],[215,0,164,0],[216,0,165,0],[217,0,166,0],[218,0,167,0],[219,0,168,0],[220,0,169,0],[221,0,170,0],[222,0,171,0],[223,0,172,0],[224,0,173,0],[225,0,174,0],[226,0,175,0],[227,0,176,0],[228,2,177,7],[228,11,177,16,"addClipboardListener"],[228,31,177,36,"addClipboardListener"],[228,32,177,37,"listener"],[228,40,177,45],[228,42,177,47],[229,4,178,4],[230,4,179,4],[230,10,179,10,"listenerWrapper"],[230,25,179,25],[230,28,179,29,"event"],[230,33,179,34],[230,37,179,39],[231,6,180,8],[231,12,180,14,"wrappedEvent"],[231,24,180,26],[231,27,180,29],[232,8,181,12],[232,11,181,15,"event"],[232,16,181,20],[233,8,182,12],[233,12,182,16,"content"],[233,19,182,23,"content"],[233,20,182,23],[233,22,182,26],[234,10,183,16,"console"],[234,17,183,23],[234,18,183,24,"warn"],[234,22,183,28],[234,23,183,29],[234,141,183,147],[234,142,183,148],[235,10,184,16],[235,17,184,23],[235,19,184,25],[236,8,185,12],[237,6,186,8],[237,7,186,9],[238,6,187,8,"listener"],[238,14,187,16],[238,15,187,17,"wrappedEvent"],[238,27,187,29],[238,28,187,30],[239,4,188,4],[239,5,188,5],[240,4,189,4],[240,11,189,11,"ExpoClipboard"],[240,33,189,24],[240,34,189,25,"addListener"],[240,45,189,36],[240,46,189,37,"onClipboardEventName"],[240,66,189,57],[240,68,189,59,"listenerWrapper"],[240,83,189,74],[240,84,189,75],[241,2,190,0],[242,2,191,0],[243,0,192,0],[244,0,193,0],[245,0,194,0],[246,0,195,0],[247,0,196,0],[248,0,197,0],[249,0,198,0],[250,0,199,0],[251,0,200,0],[252,0,201,0],[253,0,202,0],[254,0,203,0],[255,2,204,7],[255,11,204,16,"removeClipboardListener"],[255,34,204,39,"removeClipboardListener"],[255,35,204,40,"subscription"],[255,47,204,52],[255,49,204,54],[256,4,205,4,"subscription"],[256,16,205,16],[256,17,205,17,"remove"],[256,23,205,23],[256,24,205,24],[256,25,205,25],[257,2,206,0],[258,2,207,0],[259,0,208,0],[260,0,209,0],[261,0,210,0],[262,0,211,0],[263,0,212,0],[264,0,213,0],[265,2,214,7],[265,8,214,13,"isPasteButtonAvailable"],[265,30,214,35],[265,33,214,35,"exports"],[265,40,214,35],[265,41,214,35,"isPasteButtonAvailable"],[265,63,214,35],[265,66,214,38,"Platform"],[265,91,214,46],[265,92,214,47,"OS"],[265,94,214,49],[265,99,214,54],[265,104,214,59],[265,107,214,62,"ExpoClipboard"],[265,129,214,75],[265,130,214,76,"isPasteButtonAvailable"],[265,152,214,98],[265,155,214,101],[265,160,214,106],[266,0,214,107],[266,3]],"functionMap":{"names":["<global>","getStringAsync","setStringAsync","setString","hasStringAsync","getUrlAsync","setUrlAsync","hasUrlAsync","getImageAsync","setImageAsync","hasImageAsync","addClipboardListener","listenerWrapper","wrappedEvent.get__content","removeClipboardListener"],"mappings":"AAA;OCW;CDK;OES;CFK;OGQ;CHS;OIQ;CJK;OKO;CLK;OMW;CNK;OOO;CPK;OQiB;CRK;OSe;CTK;OUQ;CVK;OWqB;4BCE;YCG;aDG;KDG;CXE;Occ;CdE"}},"type":"js/module"}]}